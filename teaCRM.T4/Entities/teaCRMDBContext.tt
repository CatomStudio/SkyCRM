<#@ template debug="True" hostspecific="True" language="C#" #>
<#@ Include File="../MultipleOutputHelper.ttinclude" #>
<#@ Assembly Name="$(TargetDir)NLite.dll" #>
<#@ Assembly Name="$(TargetDir)ELinq.dll" #>
<#@ Assembly Name="System.Data" #>
<#@ Assembly Name="$(TargetDir)\MySql.Data.dll" #>
<#@ Import Namespace="NLite.Data" #>
<#@ Import Namespace="NLite.Data.CodeGeneration" #>
<#@ output extension=".cs" #>
<#
	var @contextNamespace = "teaCRM.DBContext";
	var @ModelNamespace = "teaCRM.Entity";
	var @Date=System.DateTime.Now.ToString("yyyy-MM-dd hh:mm:ss");

	var connectionStringName = "teaCRMSqlServer";
	var dbType=GetAppSettings("databaseType");
	switch(dbType){
		    case "SqlServer":
	        connectionStringName = "teaCRMSqlServer";
			break;
			case "MySql":
				 connectionStringName = "teaCRMMySql";
			break;
			default:
			 connectionStringName = "teaCRMSqlServer";
			break;
    }
	//var dbContextName = Host.TemplateFile.Split('\\')[Host.TemplateFile.Split('\\').Length - 1].TrimEnd('.', 't');
	var dbContextName =Path.GetFileNameWithoutExtension(Host.TemplateFile);
	var connectionStringSetting = GetConnectionStringSettings(connectionStringName);
	var connectionString = connectionStringSetting.ConnectionString;
	var dbProviderName = connectionStringSetting.ProviderName;
	var dbConfiguration = DbConfiguration.Configure(connectionString, dbProviderName);
	var databaseSchema = dbConfiguration.Schema;
	var manager = Manager.Create(Host, GenerationEnvironment);
	//manager.StartHeader();
#>
<#
//开始DbContext======================================================================================
#>
/*
 * ========================================================================
 * Copyright(c) 2013-2014 郑州优创科技有限公司, All Rights Reserved.
 * ========================================================================
 *  
 * 【teaCRM数据库操作上下文】
 *  
 *  
 * 作者：唐有炜   时间：@Date
 * 文件名：@dbContextName
 * 版本：V1.0.0
 * 
 * 修改者：唐有炜           时间：@Date              
 * 修改说明：修改说明
 * ========================================================================
*/
using System;
using System.Collections.Generic;
using System.Linq;
using NLite.Data;
using teaCRM.Entity;
using NLite.Reflection;
namespace <#= @contextNamespace #>
{
	public partial class <#= dbContextName #>:DbContext
	{
	 #region 初始化上下文
		//连接字符串名称：基于Config文件中连接字符串的配置
        const string connectionStringName = "<#= connectionStringName #>";

        //构造dbConfiguration 对象
        static DbConfiguration dbConfiguration;

		static <#= dbContextName #>()
		{
			 dbConfiguration = DbConfiguration
                  .Configure(connectionStringName)
                  .SetSqlLogger(() =>SqlLog.Debug)
				  .AddFromAssemblyOf<<#= dbContextName #>>(t=>t.HasAttribute<TableAttribute>(false))
				  ;
		}

		public <#= dbContextName #>():base(dbConfiguration){}
			#endregion

		#region 数据集关联
<#foreach (var tb in databaseSchema.Tables.Union(databaseSchema.Views)){#>
		public IDbSet<<#=NamingConversion.Default.ClassName(tb.TableName)  #>> <#= NamingConversion.Default.QueryableName(tb.TableName) #> { get; private set; }
<#}#>
  #endregion
	}
	<#
//结束DbContext======================================================================================
#>


<#
  //开始Model======================================================================================
    foreach (var tb in databaseSchema.Tables){
  #>
  <#
manager.StartNewFile(NamingConversion.Default.ClassName(tb.TableName)+ ".cs");
#>
using System;
using System.Collections.Generic;
using System.Linq;
using NLite.Data;
namespace <#= @ModelNamespace #>
{
	[Table("<#= tb.TableName #>")]
	public partial class <#= NamingConversion.Default.ClassName( tb.TableName) #> 
	{
<#foreach (var col in tb.PrimaryKeys){#>	
		[Id("<#= col.ColumnName#>",IsDbGenerated=<#= col.IsGenerated.ToString().ToLower() #>)]
		public <#= NamingConversion.Default.DataType(col) #> <#= NamingConversion.Default.PropertyName(col.ColumnName) #> { get;set; }
<#}#> 
<#foreach (var col in tb.Columns){#>
		[Column("<#= col.ColumnName#>")]
		public <#= NamingConversion.Default.DataType(col) #> <#= NamingConversion.Default.PropertyName(col.ColumnName) #> { get;set; }
<#}#> 
<#foreach (var fk in tb.ForeignKeys){#>
		[ManyToOne(ThisKey="<#= NamingConversion.Default.PropertyName( fk.ThisKey.ColumnName) #>",OtherKey="<#= NamingConversion.Default.PropertyName(fk.OtherKey.ColumnName) #>")]
		public <#= NamingConversion.Default.ClassName(fk.OtherTable.TableName) #> <#= NamingConversion.Default.ManyToOneName(fk) #> { get;set; }
<#}#> 
<#foreach (var fk in tb.Children){#>
		[OneToMany(ThisKey="<#= NamingConversion.Default.PropertyName( fk.ThisKey.ColumnName) #>",OtherKey="<#= NamingConversion.Default.PropertyName(fk.OtherKey.ColumnName) #>")]
		public IList<<#= NamingConversion.Default.ClassName(fk.OtherTable.TableName) #>> <#= NamingConversion.Default.QueryableName(fk.OtherTable.TableName) #> { get;set; }
<#}#> 
	}
<# } manager.EndBlock();
 foreach (var tb in databaseSchema.Views){
	 manager.StartNewFile(NamingConversion.Default.ClassName(tb.TableName) + ".cs");
	 //开始视图
	 #>

	using System;
using System.Collections.Generic;
using System.Linq;
using NLite.Data;
namespace <#= @ModelNamespace #>
{
	
	[Table("<#= tb.TableName #>",Readonly=true)]
	public partial class <#= NamingConversion.Default.ClassName( tb.TableName) #> 
	{
<#foreach (var col in tb.Columns){#>
		[Column("<#= col.ColumnName#>")]
		public <#= col.Type.Name #> <#= NamingConversion.Default.PropertyName(col.ColumnName) #> { get;set; }

		 
<#}#>  
     

		  }
<# 
	} 

 manager.EndBlock();
  manager.StartFooter();
#>

}




<#
 //执行===================================================================================
 manager.Process(true);
#>